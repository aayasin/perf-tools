#!/usr/bin/env python
# stats re path to precise events
# Author: Ahmad Yasin
# edited: June 2022
#
from __future__ import print_function
__author__ = 'ayasin'

from lbr import *
import common as C
import os

dump_only = os.getenv('LBR_DUMP')
stop = os.getenv('LBR_STOP')
c = {x: 0 for x in ('loop_head', 'loop_seq', 'loop_jmp2mid', 'loop_jmp2head', 'sequential', 'total')}

# usage: perf script -F +brstackinsn [--xed] | ./lbr_stats [ip-of-sample=ALL] [ip-of-loop=0] [num-loops=10] [enable-loop-stats=0] [event=LBR_Event]
ip = C.arg(1, 'ALL')
filter = None
if ip not in ('ALL', '-'):
  filter = '%x'%int(ip, 16) #asserts in hexa
  c['ip'] = '0x'+filter
loop = int(C.arg(2, '0'), 16)
top = int(C.arg(3, '10'))
loop_stats = bool(int(C.arg(4, '0')))
ev = C.arg(5, LBR_Event)

while True:
  sample = read_sample(ip_filter=filter, min_lines=2, loop_ipc=loop, lp_stats_en=loop_stats, event=ev)
  if not sample: break
  assert len(sample) > 2, 'invalid sample: ' + str(sample)
  if dump_only:
    C.printf(' dump-only=%s ' % dump_only)
    slen = int(dump_only) if dump_only.isdigit() else 0
    if dump_only == 'call':
      dat = ';'.join(sample)
      if 'call' in dat:
        print_sample(sample, slen)
        sys.exit(0)
    else:
      print_sample(sample, slen)
    continue
  c['total'] += 1
  if stop and c['total'] >= int(stop):
    if not loop:
      print_sample(sample, 0)
      C.info('stopping after %s valid samples' % stop)
      C.printf("run:\t 'kill -9 $(pidof perf)'\t!\n")
    break
  if not is_taken(sample[-2]): c['sequential'] += 1
  if is_loop(sample[-1]):
    c['loop_head'] += 1
    if not is_taken(sample[-2]): c['loop_seq'] += 1
    elif is_taken(sample[-2]) and is_jmp_next(get_taken(sample, -1)): c['loop_jmp2head'] += 1
    br = get_taken(sample, -2)
    ip = line_ip(sample[-1])
    if br['to'] > ip and br['to'] <= get_loop(ip)['back']:
      c['loop_jmp2mid'] += 1
      continue
      print_sample(sample, 22)
      print_loop(ip)
      print_br(br)
      print(c)
      print(stat)
      exit(0)

if not dump_only:
  if not loop: print_header()
  if 'DSB_MISS' in ev: print(c, C.ratio('sequential', c), C.ratio('loop_seq', c, 'loop_head'),
    C.ratio('loop_jmp2mid', c, 'loop_head'), C.ratio('loop_jmp2head', c, 'loop_head'), sep=', ')
  if filter:
    print_loop(loop)
    print(stat)
  else:
    print_all(top, loop_ipc=loop)

