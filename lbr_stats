#!/usr/bin/env python
# Copyright (c) 2020-2023, Intel Corporation
# Author: Ahmad Yasin
#
#   This program is free software; you can redistribute it and/or modify it under the terms and conditions of the
# GNU General Public License, version 2, as published by the Free Software Foundation.
#   This program is distributed in the hope it will be useful, but WITHOUT # ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

# A module for processing LBR streams

from __future__ import print_function
__author__ = 'ayasin'

from lbr import *
import common as C
import os

c = {x: 0 for x in ('loop_head', 'loop_seq', 'loop_jmp2mid', 'loop_jmp2head', 'sequential', 'total')}

# usage: perf script -F +brstackinsn [--xed] | ./lbr_stats [ip-of-sample=ALL] [ip-of-loop=0] [num-loops=10] [enable-loop-stats=0] [event=LBR_Event]
ip = C.arg(1, 'ALL')
filter = None
if ip not in ('ALL', '-'):
  filter = '%x'%int(ip, 16) #asserts in hexa
  c['ip'] = '0x'+filter
loop = int(C.arg(2, '0'), 16)
top = int(C.arg(3, '10'))
loop_stats = bool(int(C.arg(4, '0')))
ev = C.arg(5, LBR_Event)

while True:
  sample = read_sample(ip_filter=filter, min_lines=2, loop_ipc=loop, lp_stats_en=loop_stats, event=ev,
                       skip_bad=not 'ANY_DSB_MISS' in ev)
  if not sample: break
  assert len(sample) > 2, 'invalid sample: ' + str(sample)
  c['total'] += 1
  if not is_taken(sample[-2]): c['sequential'] += 1
  ip = header_ip(sample[0]) if sample[-1].strip().startswith('...') else line_ip(sample[-1])
  if is_loop_by_ip(ip):
    c['loop_head'] += 1
    if not is_taken(sample[-2]): c['loop_seq'] += 1
    elif is_taken(sample[-2]) and is_jmp_next(get_taken(sample, -1)): c['loop_jmp2head'] += 1
    br = get_taken(sample, -2)
    if br['to'] > ip and br['to'] <= get_loop(ip)['back']:
      c['loop_jmp2mid'] += 1
      continue
      print_sample(sample, 22)
      print_loop(ip)
      print_br(br)
      print(c)
      print(stat)
      exit(0)

if 1:
  if not loop: print_header()
  if 'DSB_MISS' in ev: print(c, C.ratio('sequential', c), C.ratio('loop_seq', c, 'loop_head'),
    C.ratio('loop_jmp2mid', c, 'loop_head'), C.ratio('loop_jmp2head', c, 'loop_head'), sep=', ')
  if filter:
    print_loop(loop)
    print(stat)
  else:
    print_all(top, loop_ipc=loop)

