#!/usr/bin/env python3
# Copyright (c) 2020-2024, Intel Corporation
# Author: Ahmad Yasin
#
#   This program is free software; you can redistribute it and/or modify it under the terms and conditions of the
# GNU General Public License, version 2, as published by the Free Software Foundation.
#   This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

# yperf - profiles (system) in a single run, generates reports and advises for SW optimizations
#
# TODO:
#  - try toplev instead of perf-stat in "perf-track" to avoid the PROXY of BV warning
#
from __future__ import print_function
__author__  = 'ayasin'
__version__ = 0.42  # see version line of do.py

import common as C, pmu, tma

prof_modes = ['record', 'report', 'advise']
prof_type = ['java', 'python']
def parse_args():
  usage = '\n\t'.join(('prof [options] <mode> [-- app and args]',
                       'profile a workload in one-shot (a single profiling run)',
                       'profiles system-wide by default unless an app is provided'))
  bott_events = [
    'ICACHE_TAG.STALLS', 'ICACHE_DATA.STALLS',                                          # BigC
    'DSB2MITE_SWITCHES.PENALTY_CYCLES', #'IDQ.MS_UOPS:c1:e1',                           # IFetchBW
    'INT_MISC.CLEAR_RESTEER_CYCLES',                                                    # Misps
    # 'BR_MISP_RETIRED.ALL_BRANCHES', 'INT_MISC.CLEARS_COUNT', 'MACHINE_CLEARS.COUNT',  # Misps
    ]
  if pmu.goldencove_on(): bott_events += ['INT_MISC.UNKNOWN_BRANCH_CYCLES',             # BigC
    # 'UOPS_RETIRED.MS', # overloads frontend!
    ]
  if pmu.lioncove_on(): bott_events += ['IDQ.MS_CYCLES_ANY']                            # Misps, IFetchBW
  assert len(bott_events) < 8
  events = tma.fixed_metrics()[0] + \
           ((',' + ','.join([pmu.event(e) for e in bott_events])) if C.Globals['cputype'] == 'core' else '')
  if len(bott_events) < 7: events += ',cycles:k'
  ap = C.argument_parser(usage, mask=0x101,
    defs={'app': None, 'delay': 0, 'events': events, 'sys-wide': 10, 'verbose': -1,
    })
  ap.add_argument('mode', choices=prof_modes, help='mode for yperf: ' + ' '.join(prof_modes))
  ap.add_argument('-t', '--type', choices=prof_type, help='workload type: ' + ' '.join(prof_type))
  ap.add_argument('-o', '--output', help='basename to use for output files')
  args, rest = ap.parse_known_args()
  if rest:
    if rest[0] == '--': rest.pop(0)
    args.app = ' '.join(rest)
    args.sys_wide = 0
  if args.output: pass
  elif args.sys_wide: args.output = f'myprofile-{args.sys_wide}'
  else: args.output = C.command_basename(args.app)
  if not pmu.goldencove_on(): C.warn('old PMU: ' + pmu.name())
  return args

def main():
  args = parse_args()
  events = f'\\"{args.events}\\"'; args.events = ''
  cmds = 'suspend-smt' if pmu.cpu('smt-on') else ''
  cmds += 'profile --mode profile'
  if args.mode == 'report':
    if not len(C.glob(args.output + '*.perf.data', 1)): C.error("run 'yperf record' before 'yperf report'")
    cmds = 'profile tar --mode process'
  elif args.mode == 'advise':
    if not len(C.glob(args.output + '*.info.log', 1)): C.error("run 'yperf report' before 'yperf advise'")
    C.warn('Using a PROXY of Bottlenecks View that is subject to INACCURACIES. Use do.py for in-depth analysis!')
    cmds = 'analyze'
  else:
    assert args.mode.startswith('record'), f"unsupported mode: '{args.mode}'"
  # FIXME:03: high overhead with :srcline:1
  # FIXME:04: :funcs:0 can reduce processing time too (not used by advise mode)
  tune = '' # :funcs:0 :srcline:1
  if args.type == 'java':
    if args.sys_wide == 0: C.error("Must profile system-wide for Java profiling")
    tune += " :perf-jit:1"
  elif args.type == 'python':
    tune += " :perf-jit:2"
  tune += f" :loops:0 :perf-track:\"'-e {events}'\""
  app = f"-a '{args.app}'" if args.app else ''
  app +=  f" -C {args.cpu}" if args.cpu else ''
  profile = ' '.join([C.realpath('do.py'), cmds, C.argp_get_common(args), f'-pm {args.profile_mask:x} -v {args.verbose}',
    C.argp_tune_prepend(args, tune), app, f'-o {args.output}'])
  C.exe_cmd(profile, debug=args.verbose + 1, fail=args.verbose>0)

if __name__ == "__main__":
  main()
